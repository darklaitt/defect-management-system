import { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import { Container, Row, Col, Card, Button, Table, Alert } from 'react-bootstrap';
import { useAuth } from '../../context/AuthContext';
import { translateStatus, translatePriority } from '../../utils/localization';

const ProjectReportPage = () => {
  const { projectId } = useParams();
  const [report, setReport] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const { token, user } = useAuth();

  // –¢–æ–ª—å–∫–æ manager –º–æ–∂–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç—ã
  const canExportReports = user && user.role === 'manager';

  useEffect(() => {
    fetchReport();
  }, [projectId, token]);

  const fetchReport = async () => {
    if (!token) {
      setError('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
      setLoading(false);
      return;
    }

    try {
      const response = await fetch(`http://localhost:5000/api/reports/projects/${projectId}`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç—á—ë—Ç–∞');
      }

      const data = await response.json();
      setReport(data);
      setLoading(false);
    } catch (err) {
      setError(err.message);
      setLoading(false);
    }
  };

  const handleExportCSV = () => {
    const url = `http://localhost:5000/api/reports/projects/${projectId}/csv`;
    const link = document.createElement('a');
    link.href = url;
    link.setAttribute('download', `project_${projectId}_report.csv`);
    
    fetch(url, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    })
    .then(response => response.blob())
    .then(blob => {
      const url = window.URL.createObjectURL(blob);
      link.href = url;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    })
    .catch(err => {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: ' + err.message);
    });
  };

  if (loading) return <Container className="mt-4"><div>–ó–∞–≥—Ä—É–∑–∫–∞...</div></Container>;
  if (error) return <Container className="mt-4"><Alert variant="danger">–û—à–∏–±–∫–∞: {error}</Alert></Container>;
  if (!report) return <Container className="mt-4"><div>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</div></Container>;

  const { project, statistics, defects } = report;

  return (
    <Container className="mt-4">
      <div className="d-flex justify-content-between align-items-center mb-4">
        <h2>–û—Ç—á—ë—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç—É: {project.name}</h2>
        {canExportReports && (
          <Button variant="success" onClick={handleExportCSV}>
            üì• –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
          </Button>
        )}
      </div>

      {project.description && (
        <p className="text-muted">{project.description}</p>
      )}

      {/* –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <Row className="mb-4">
        <Col md={3}>
          <Card className="text-center">
            <Card.Body>
              <h5>–í—Å–µ–≥–æ –¥–µ—Ñ–µ–∫—Ç–æ–≤</h5>
              <h2 className="text-primary">{statistics.totalDefects}</h2>
            </Card.Body>
          </Card>
        </Col>
        <Col md={3}>
          <Card className="text-center">
            <Card.Body>
              <h5>–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</h5>
              <h2 className="text-success">{statistics.completionRate}%</h2>
            </Card.Body>
          </Card>
        </Col>
        <Col md={3}>
          <Card className="text-center">
            <Card.Body>
              <h5>–ê–∫—Ç–∏–≤–Ω—ã—Ö</h5>
              <h2 className="text-warning">
                {statistics.byStatus.new + statistics.byStatus.in_progress + statistics.byStatus.review}
              </h2>
            </Card.Body>
          </Card>
        </Col>
        <Col md={3}>
          <Card className="text-center">
            <Card.Body>
              <h5>–ó–∞–∫—Ä—ã—Ç–æ</h5>
              <h2 className="text-secondary">{statistics.byStatus.closed}</h2>
            </Card.Body>
          </Card>
        </Col>
      </Row>

      {/* –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <Row className="mb-4">
        <Col md={6}>
          <Card>
            <Card.Header><strong>–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º</strong></Card.Header>
            <Card.Body>
              <div className="mb-2">
                <div className="d-flex justify-content-between">
                  <span>üÜï –ù–æ–≤—ã–π:</span>
                  <strong>{statistics.byStatus.new}</strong>
                </div>
                <div className="progress" style={{height: '10px'}}>
                  <div 
                    className="progress-bar bg-info" 
                    style={{width: `${(statistics.byStatus.new / statistics.totalDefects * 100)}%`}}
                  ></div>
                </div>
              </div>

              <div className="mb-2">
                <div className="d-flex justify-content-between">
                  <span>üîß –í —Ä–∞–±–æ—Ç–µ:</span>
                  <strong>{statistics.byStatus.in_progress}</strong>
                </div>
                <div className="progress" style={{height: '10px'}}>
                  <div 
                    className="progress-bar bg-warning" 
                    style={{width: `${(statistics.byStatus.in_progress / statistics.totalDefects * 100)}%`}}
                  ></div>
                </div>
              </div>

              <div className="mb-2">
                <div className="d-flex justify-content-between">
                  <span>üëÄ –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ:</span>
                  <strong>{statistics.byStatus.review}</strong>
                </div>
                <div className="progress" style={{height: '10px'}}>
                  <div 
                    className="progress-bar bg-primary" 
                    style={{width: `${(statistics.byStatus.review / statistics.totalDefects * 100)}%`}}
                  ></div>
                </div>
              </div>

              <div className="mb-2">
                <div className="d-flex justify-content-between">
                  <span>‚úÖ –ó–∞–∫—Ä—ã—Ç:</span>
                  <strong>{statistics.byStatus.closed}</strong>
                </div>
                <div className="progress" style={{height: '10px'}}>
                  <div 
                    className="progress-bar bg-success" 
                    style={{width: `${(statistics.byStatus.closed / statistics.totalDefects * 100)}%`}}
                  ></div>
                </div>
              </div>

              <div className="mb-2">
                <div className="d-flex justify-content-between">
                  <span>‚ùå –û—Ç–º–µ–Ω—ë–Ω:</span>
                  <strong>{statistics.byStatus.cancelled}</strong>
                </div>
                <div className="progress" style={{height: '10px'}}>
                  <div 
                    className="progress-bar bg-secondary" 
                    style={{width: `${(statistics.byStatus.cancelled / statistics.totalDefects * 100)}%`}}
                  ></div>
                </div>
              </div>
            </Card.Body>
          </Card>
        </Col>

        <Col md={6}>
          <Card>
            <Card.Header><strong>–ü–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º</strong></Card.Header>
            <Card.Body>
              <div className="mb-3">
                <div className="d-flex justify-content-between">
                  <span>üî¥ –í—ã—Å–æ–∫–∏–π:</span>
                  <strong>{statistics.byPriority.high}</strong>
                </div>
                <div className="progress" style={{height: '15px'}}>
                  <div 
                    className="progress-bar bg-danger" 
                    style={{width: `${(statistics.byPriority.high / statistics.totalDefects * 100)}%`}}
                  ></div>
                </div>
              </div>

              <div className="mb-3">
                <div className="d-flex justify-content-between">
                  <span>üü° –°—Ä–µ–¥–Ω–∏–π:</span>
                  <strong>{statistics.byPriority.medium}</strong>
                </div>
                <div className="progress" style={{height: '15px'}}>
                  <div 
                    className="progress-bar bg-warning" 
                    style={{width: `${(statistics.byPriority.medium / statistics.totalDefects * 100)}%`}}
                  ></div>
                </div>
              </div>

              <div className="mb-3">
                <div className="d-flex justify-content-between">
                  <span>üü¢ –ù–∏–∑–∫–∏–π:</span>
                  <strong>{statistics.byPriority.low}</strong>
                </div>
                <div className="progress" style={{height: '15px'}}>
                  <div 
                    className="progress-bar bg-success" 
                    style={{width: `${(statistics.byPriority.low / statistics.totalDefects * 100)}%`}}
                  ></div>
                </div>
              </div>
            </Card.Body>
          </Card>
        </Col>
      </Row>

      {/* –î–µ—Ñ–µ–∫—Ç—ã –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º */}
      <Row className="mb-4">
        <Col md={12}>
          <Card>
            <Card.Header><strong>–ü–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º</strong></Card.Header>
            <Card.Body>
              <Table striped bordered size="sm">
                <thead>
                  <tr>
                    <th>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å</th>
                    <th className="text-end">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ñ–µ–∫—Ç–æ–≤</th>
                  </tr>
                </thead>
                <tbody>
                  {Object.entries(statistics.byAssignee).map(([assignee, count]) => (
                    <tr key={assignee}>
                      <td>{assignee}</td>
                      <td className="text-end"><strong>{count}</strong></td>
                    </tr>
                  ))}
                </tbody>
              </Table>
            </Card.Body>
          </Card>
        </Col>
      </Row>

      {/* –¢–∞–±–ª–∏—Ü–∞ –¥–µ—Ñ–µ–∫—Ç–æ–≤ */}
      <h4 className="mb-3">–°–ø–∏—Å–æ–∫ –¥–µ—Ñ–µ–∫—Ç–æ–≤</h4>
      <Table striped bordered hover responsive>
        <thead>
          <tr>
            <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
            <th>–°—Ç–∞—Ç—É—Å</th>
            <th>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</th>
            <th>–ù–∞–∑–Ω–∞—á–µ–Ω</th>
            <th>–°–æ–∑–¥–∞–ª</th>
            <th>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è</th>
          </tr>
        </thead>
        <tbody>
          {defects.length === 0 ? (
            <tr>
              <td colSpan="6" className="text-center text-muted">
                –î–µ—Ñ–µ–∫—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç
              </td>
            </tr>
          ) : (
            defects.map(defect => (
              <tr key={defect.id}>
                <td>{defect.title}</td>
                <td>{translateStatus(defect.status)}</td>
                <td>{translatePriority(defect.priority)}</td>
                <td>{defect.assignee || '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}</td>
                <td>{defect.createdBy || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</td>
                <td>{new Date(defect.createdAt).toLocaleDateString('ru-RU')}</td>
              </tr>
            ))
          )}
        </tbody>
      </Table>
    </Container>
  );
};

export { ProjectReportPage };
