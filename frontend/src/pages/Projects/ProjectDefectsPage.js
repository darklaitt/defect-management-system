import { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import { Container, Table, Form, Button, Row, Col, Badge, InputGroup } from 'react-bootstrap';
import { useAuth } from '../../context/AuthContext';
import { translateStatus, translatePriority, getStatusColor, getPriorityColor } from '../../utils/localization';

const ProjectDefectsPage = () => {
  const { projectId } = useParams();
  const [defects, setDefects] = useState([]);
  const [filteredDefects, setFilteredDefects] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [project, setProject] = useState(null);
  const { token, user } = useAuth();
  const [newDefect, setNewDefect] = useState({ 
    title: '', 
    description: '',
    priority: 'medium' 
  });

  // –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
  const [searchText, setSearchText] = useState('');

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤: engineer –∏ manager –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å/—É–¥–∞–ª—è—Ç—å
  const canManageDefects = user && (user.role === 'engineer' || user.role === 'manager');
  // –¢–æ–ª—å–∫–æ manager –º–æ–∂–µ—Ç –¥–µ–ª–∞—Ç—å –æ—Ç—á—ë—Ç—ã (—É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ—Ç—á—ë—Ç–∞)

  useEffect(() => {
    const fetchData = async () => {
      if (!token) {
        setError('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
        setLoading(false);
        return;
      }

      try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
        const projectResponse = await fetch(`http://localhost:5000/api/projects/${projectId}`, {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });
        if (!projectResponse.ok) {
          throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ');
        }
        const projectData = await projectResponse.json();
        setProject(projectData);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ñ–µ–∫—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç —Å —Ñ–∏–ª—å—Ç—Ä–æ–º)
        const defectsResponse = await fetch(`http://localhost:5000/api/defects`, {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });
        if (!defectsResponse.ok) {
          throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ñ–µ–∫—Ç–æ–≤');
        }
        const allDefects = await defectsResponse.json();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ allDefects - —ç—Ç–æ –º–∞—Å—Å–∏–≤
        if (!Array.isArray(allDefects)) {
          console.error('–û—Ç–≤–µ—Ç API –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º:', allDefects);
          setDefects([]);
          setFilteredDefects([]);
          setLoading(false);
          return;
        }
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –¥–µ—Ñ–µ–∫—Ç—ã –ø–æ –ø—Ä–æ–µ–∫—Ç—É
        const defectsData = allDefects.filter(d => d.projectId === parseInt(projectId));
        
        console.log('–í—Å–µ –¥–µ—Ñ–µ–∫—Ç—ã:', allDefects);
        console.log('ProjectId –∏–∑ URL:', projectId, '–∫–∞–∫ —á–∏—Å–ª–æ:', parseInt(projectId));
        console.log('–î–µ—Ñ–µ–∫—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞:', defectsData);
        
        setDefects(defectsData);
        setFilteredDefects(defectsData);
        setLoading(false);
      } catch (err) {
        setError(err.message);
        setLoading(false);
      }
    };

    fetchData();
  }, [projectId, token]);

  // –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
  useEffect(() => {
    if (!searchText) {
      setFilteredDefects(defects);
    } else {
      const filtered = defects.filter(d => 
        d.title.toLowerCase().includes(searchText.toLowerCase())
      );
      setFilteredDefects(filtered);
    }
  }, [defects, searchText]);

  const handleCreate = async () => {
    if (!token) {
      setError('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
      return;
    }

    try {
      const response = await fetch('http://localhost:5000/api/defects', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          ...newDefect,
          projectId: parseInt(projectId),
          status: 'new'
        })
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–µ—Ñ–µ–∫—Ç–∞');
      }

      const createdDefect = await response.json();
      const updatedDefects = [...defects, createdDefect];
      setDefects(updatedDefects);
      setNewDefect({ title: '', description: '', priority: 'medium' });
    } catch (err) {
      setError(err.message);
    }
  };

  const handleDelete = async (id) => {
    if (!token) {
      setError('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
      return;
    }

    try {
      const response = await fetch(`http://localhost:5000/api/defects/${id}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–µ—Ñ–µ–∫—Ç–∞');
      }

      const updatedDefects = defects.filter(defect => defect.id !== id);
      setDefects(updatedDefects);
    } catch (err) {
      setError(err.message);
    }
  };

  const handleStatusChange = async (defectId, newStatus) => {
    if (!token || !canManageDefects) {
      setError('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤');
      return;
    }

    try {
      const response = await fetch(`http://localhost:5000/api/defects/${defectId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({ status: newStatus })
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞');
      }

      const updatedDefects = defects.map(d => 
        d.id === defectId ? { ...d, status: newStatus } : d
      );
      setDefects(updatedDefects);
    } catch (err) {
      setError(err.message);
    }
  };

  // –†–∞–∑–¥–µ–ª—è–µ–º –¥–µ—Ñ–µ–∫—Ç—ã –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ
  const activeDefects = filteredDefects.filter(d => d.status !== 'closed' && d.status !== 'cancelled');
  const completedDefects = filteredDefects.filter(d => d.status === 'closed' || d.status === 'cancelled');

  if (loading) return <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  if (error) return <div>–û—à–∏–±–∫–∞: {error}</div>;

  return (
    <Container>
      <h2 className="my-4">–î–µ—Ñ–µ–∫—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞: {project?.name}</h2>

      {canManageDefects && (
        <Form className="mb-4 p-4 border rounded bg-light">
          <h5 className="mb-3">–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –¥–µ—Ñ–µ–∫—Ç</h5>
        <Row>
          <Col md={6}>
            <Form.Group className="mb-3">
              <Form.Label>–ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ—Ñ–µ–∫—Ç–∞ *</Form.Label>
              <Form.Control
                type="text"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ—Ñ–µ–∫—Ç–∞"
                value={newDefect.title}
                onChange={(e) => setNewDefect({...newDefect, title: e.target.value})}
                required
              />
            </Form.Group>
          </Col>
          <Col md={6}>
            <Form.Group className="mb-3">
              <Form.Label>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</Form.Label>
              <Form.Select
                value={newDefect.priority}
                onChange={(e) => setNewDefect({...newDefect, priority: e.target.value})}
              >
                <option value="low">–ù–∏–∑–∫–∏–π</option>
                <option value="medium">–°—Ä–µ–¥–Ω–∏–π</option>
                <option value="high">–í—ã—Å–æ–∫–∏–π</option>
              </Form.Select>
            </Form.Group>
          </Col>
        </Row>

        <Form.Group className="mb-3">
          <Form.Label>–û–ø–∏—Å–∞–Ω–∏–µ</Form.Label>
          <Form.Control
            as="textarea"
            rows={3}
            placeholder="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ—Ñ–µ–∫—Ç–∞"
            value={newDefect.description}
            onChange={(e) => setNewDefect({...newDefect, description: e.target.value})}
          />
        </Form.Group>

          <Button variant="primary" onClick={handleCreate}>
            –î–æ–±–∞–≤–∏—Ç—å –¥–µ—Ñ–µ–∫—Ç
          </Button>
        </Form>
      )}

      {/* –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ */}
      <div className="mb-4">
        <Form.Group>
          <Form.Label>üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é</Form.Label>
          <InputGroup>
            <Form.Control
              type="text"
              placeholder="–ü–æ–∏—Å–∫ –¥–µ—Ñ–µ–∫—Ç–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é..."
              value={searchText}
              onChange={(e) => setSearchText(e.target.value)}
            />
            <Button 
              variant="outline-secondary" 
              onClick={() => setSearchText('')}
              disabled={!searchText}
            >
              ‚úï
            </Button>
          </InputGroup>
          {searchText && (
            <Form.Text className="text-muted">
              –ù–∞–π–¥–µ–Ω–æ: <strong>{filteredDefects.length}</strong> –∏–∑ {defects.length}
            </Form.Text>
          )}
        </Form.Group>
      </div>

      {/* –ê–∫—Ç–∏–≤–Ω—ã–µ –¥–µ—Ñ–µ–∫—Ç—ã */}
      <h4 className="mt-4 mb-3">–ê–∫—Ç–∏–≤–Ω—ã–µ –¥–µ—Ñ–µ–∫—Ç—ã ({activeDefects.length})</h4>
      <Table striped bordered hover>
        <thead>
          <tr>
            <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
            <th>–°—Ç–∞—Ç—É—Å</th>
            <th>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</th>
            <th>–ù–∞–∑–Ω–∞—á–µ–Ω</th>
            <th>–î–µ–π—Å—Ç–≤–∏—è</th>
          </tr>
        </thead>
        <tbody>
          {activeDefects.length === 0 ? (
            <tr>
              <td colSpan="5" className="text-center text-muted">
                {defects.length === 0 
                  ? '–î–µ—Ñ–µ–∫—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π!' 
                  : '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ—Ñ–µ–∫—Ç–æ–≤ –ø–æ –ø–æ–∏—Å–∫—É'
                }
              </td>
            </tr>
          ) : (
            activeDefects.map(defect => (
              <tr key={defect.id}>
                <td>{defect.title}</td>
                <td>
                  {canManageDefects ? (
                    <Form.Select
                      size="sm"
                      value={defect.status}
                      onChange={(e) => handleStatusChange(defect.id, e.target.value)}
                      style={{width: 'auto', display: 'inline-block'}}
                    >
                      <option value="new">üÜï –ù–æ–≤—ã–π</option>
                      <option value="in_progress">üîß –í —Ä–∞–±–æ—Ç–µ</option>
                      <option value="review">üëÄ –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ</option>
                      <option value="closed">‚úÖ –ó–∞–∫—Ä—ã—Ç</option>
                      <option value="cancelled">‚ùå –û—Ç–º–µ–Ω—ë–Ω</option>
                    </Form.Select>
                  ) : (
                    <Badge bg={getStatusColor(defect.status)}>
                      {translateStatus(defect.status)}
                    </Badge>
                  )}
                </td>
                <td>
                  <Badge bg={getPriorityColor(defect.priority)}>
                    {translatePriority(defect.priority)}
                  </Badge>
                </td>
                <td>{defect.assignee?.username || '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}</td>
                <td>
                  {canManageDefects ? (
                    <Button 
                      variant="danger" 
                      size="sm" 
                      onClick={() => handleDelete(defect.id)}
                    >
                      –£–¥–∞–ª–∏—Ç—å
                    </Button>
                  ) : (
                    <span className="text-muted">‚Äî</span>
                  )}
                </td>
              </tr>
            ))
          )}
        </tbody>
      </Table>

      {/* –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –¥–µ—Ñ–µ–∫—Ç—ã */}
      {completedDefects.length > 0 && (
        <>
          <h4 className="mt-5 mb-3">–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –¥–µ—Ñ–µ–∫—Ç—ã ({completedDefects.length})</h4>
          <Table striped bordered hover className="table-secondary">
            <thead>
              <tr>
                <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                <th>–°—Ç–∞—Ç—É—Å</th>
                <th>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</th>
                <th>–ù–∞–∑–Ω–∞—á–µ–Ω</th>
                <th>–î–µ–π—Å—Ç–≤–∏—è</th>
              </tr>
            </thead>
            <tbody>
              {completedDefects.map(defect => (
                <tr key={defect.id}>
                  <td className="text-muted">{defect.title}</td>
                  <td>
                    <Badge bg={getStatusColor(defect.status)}>
                      {translateStatus(defect.status)}
                    </Badge>
                  </td>
                  <td>
                    <Badge bg={getPriorityColor(defect.priority)}>
                      {translatePriority(defect.priority)}
                    </Badge>
                  </td>
                  <td className="text-muted">{defect.assignee?.username || '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}</td>
                  <td>
                    {canManageDefects ? (
                      <Button 
                        variant="outline-danger" 
                        size="sm" 
                        onClick={() => handleDelete(defect.id)}
                      >
                        –£–¥–∞–ª–∏—Ç—å
                      </Button>
                    ) : (
                      <span className="text-muted">‚Äî</span>
                    )}
                  </td>
                </tr>
              ))}
            </tbody>
          </Table>
        </>
      )}
    </Container>
  );
};

export { ProjectDefectsPage };